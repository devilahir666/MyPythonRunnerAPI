import os
import re
from dotenv import load_dotenv
from pyrogram import Client, filters
from pyrogram.types import Message
from pyrogram.enums import ParseMode
from fastapi import FastAPI, Request, HTTPException

# .env ‡§´‡§º‡§æ‡§á‡§≤ ‡§∏‡•á variables ‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç (‡§≤‡•ã‡§ï‡§≤ ‡§ü‡•á‡§∏‡•ç‡§ü‡§ø‡§Ç‡§ó ‡§ï‡•á ‡§≤‡§ø‡§è)
load_dotenv()

# *********************************************
# RENDER/ENVIRONMENT VARIABLES (‡§ú‡§º‡§∞‡•Ç‡§∞‡•Ä ‡§ö‡•Ä‡§ú‡§º‡•á‡§Ç)
# *********************************************

API_ID = int(os.environ.get("API_ID"))
API_HASH = os.environ.get("API_HASH")
BOT_TOKEN = os.environ.get("BOT_TOKEN")
BIN_CHANNEL = int(os.environ.get("BIN_CHANNEL")) # ‡§µ‡§π ‡§ö‡•à‡§®‡§≤ ‡§ú‡§π‡§æ‡§Ç ‡§´‡§æ‡§á‡§≤‡•á‡§Ç ‡§∏‡•ç‡§ü‡•ã‡§∞ ‡§π‡•ã‡§Ç‡§ó‡•Ä
WEBHOOK_URL = os.environ.get("WEBHOOK_URL") # Render Service URL (‡§ú‡•à‡§∏‡•á: https://your-service.onrender.com)
PORT = int(os.environ.get("PORT", 8000))

# ---------------------------------------------
# Pyrogram Client Setup
# ---------------------------------------------

app = Client(
    "TG_Direct_Link_Bot",
    api_id=API_ID,
    api_hash=API_HASH,
    bot_token=BOT_TOKEN
)

# ---------------------------------------------
# Helper Functions for Link Generation
# ---------------------------------------------

def generate_direct_link(message_id: int, file_name: str) -> str:
    """
    ‡§ü‡•á‡§≤‡•Ä‡§ó‡•ç‡§∞‡§æ‡§Æ ‡§Æ‡•à‡§∏‡•á‡§ú ID ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§ï‡•á ‡§°‡§æ‡§Ø‡§∞‡•á‡§ï‡•ç‡§ü ‡§∏‡•ç‡§ü‡•ç‡§∞‡•Ä‡§Æ/‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§≤‡§ø‡§Ç‡§ï ‡§¨‡§®‡§æ‡§§‡§æ ‡§π‡•à‡•§
    """
    # ‡§Ø‡§π‡§æ‡§Å ‡§π‡§Æ Render ‡§ï‡•á URL ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç‡§ó‡•á‡•§
    # /dl/ ‡§Æ‡•à‡§∏‡•á‡§ú_‡§Ü‡§à‡§°‡•Ä/‡§´‡§º‡§æ‡§á‡§≤_‡§®‡§æ‡§Æ.‡§è‡§ï‡•ç‡§∏‡§ü‡•á‡§Ç‡§∂‡§®
    # Render ‡§ï‡§æ URL 'WEBHOOK_URL' ‡§Æ‡•á‡§Ç ‡§π‡•à, ‡§π‡§Æ‡•á‡§Ç '/bot_token' ‡§π‡§ø‡§∏‡•ç‡§∏‡§æ ‡§π‡§ü‡§æ‡§®‡§æ ‡§π‡•ã‡§ó‡§æ‡•§
    base_url = WEBHOOK_URL.replace(f"/{BOT_TOKEN}", "")
    
    # ‡§´‡§º‡§æ‡§á‡§≤ ‡§ï‡§æ ‡§®‡§æ‡§Æ URL-‡§´‡•ç‡§∞‡•á‡§Ç‡§°‡§≤‡•Ä ‡§¨‡§®‡§æ‡§§‡•á ‡§π‡•à‡§Ç
    safe_file_name = re.sub(r"[^a-zA-Z0-9.\-_]", "_", file_name)
    
    # ‡§°‡§æ‡§Ø‡§∞‡•á‡§ï‡•ç‡§ü ‡§≤‡§ø‡§Ç‡§ï ‡§´‡•â‡§∞‡•ç‡§Æ‡•á‡§ü
    direct_link = f"{base_url}/dl/{message_id}/{safe_file_name}"
    
    return direct_link

# ---------------------------------------------
# BOT COMMANDS AND HANDLERS
# ---------------------------------------------

@app.on_message(filters.command("start"))
async def start_command(client: Client, message: Message):
    """/start ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§ï‡•ã ‡§π‡•à‡§Ç‡§°‡§≤ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à"""
    await message.reply_text(
        "üëã **‡§®‡§Æ‡§∏‡•ç‡§§‡•á!** ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•á ‡§ü‡•á‡§≤‡•Ä‡§ó‡•ç‡§∞‡§æ‡§Æ ‡§´‡§º‡§æ‡§á‡§≤‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§°‡§æ‡§Ø‡§∞‡•á‡§ï‡•ç‡§ü ‡§≤‡§ø‡§Ç‡§ï ‡§ú‡•á‡§®‡§∞‡•á‡§ü ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Å‡•§\n\n"
        "‡§¨‡§∏ ‡§Æ‡•Å‡§ù‡•á ‡§ï‡•ã‡§à ‡§≠‡•Ä ‡§´‡§º‡§æ‡§á‡§≤, ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§Ø‡§æ ‡§Æ‡•Ä‡§°‡§ø‡§Ø‡§æ ‡§≠‡•á‡§ú‡§ø‡§è‡•§",
        parse_mode=ParseMode.MARKDOWN
    )

@app.on_message(filters.media & filters.private)
async def generate_link_handler(client: Client, message: Message):
    """‡§´‡§º‡§æ‡§á‡§≤ ‡§Ø‡§æ ‡§Æ‡•Ä‡§°‡§ø‡§Ø‡§æ ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§π‡•ã‡§®‡•á ‡§™‡§∞ ‡§°‡§æ‡§Ø‡§∞‡•á‡§ï‡•ç‡§ü ‡§≤‡§ø‡§Ç‡§ï ‡§ú‡•á‡§®‡§∞‡•á‡§ü ‡§ï‡§∞‡§§‡§æ ‡§π‡•à"""
    
    # 1. ‡§´‡§º‡§æ‡§á‡§≤ ‡§ï‡§æ ‡§™‡§§‡§æ ‡§≤‡§ó‡§æ‡§ì
    media = message.document or message.video or message.audio or message.photo
    
    if not media:
        await message.reply_text("‡§Æ‡§æ‡§´‡§º ‡§ï‡§∞‡§®‡§æ, ‡§Æ‡•à‡§Ç ‡§á‡§∏ ‡§§‡§∞‡§π ‡§ï‡•á ‡§Æ‡•Ä‡§°‡§ø‡§Ø‡§æ ‡§ï‡•ã ‡§π‡•à‡§Ç‡§°‡§≤ ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ‡•§")
        return
    
    status_msg = await message.reply_text("üîó ‡§°‡§æ‡§Ø‡§∞‡•á‡§ï‡•ç‡§ü ‡§≤‡§ø‡§Ç‡§ï ‡§ú‡•á‡§®‡§∞‡•á‡§ü ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à... ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•ç‡§∞‡§§‡•Ä‡§ï‡•ç‡§∑‡§æ ‡§ï‡§∞‡•á‡§Ç‡•§")
    
    try:
        # 2. ‡§´‡§º‡§æ‡§á‡§≤ ‡§ï‡•ã BIN_CHANNEL ‡§Æ‡•á‡§Ç ‡§´‡§º‡•â‡§∞‡§µ‡§∞‡•ç‡§° ‡§ï‡§∞‡•ã
        forwarded_msg = await client.forward_messages(
            chat_id=BIN_CHANNEL,
            from_chat_id=message.chat.id,
            message_ids=message.id
        )
        
        # 3. ‡§´‡§º‡•â‡§∞‡§µ‡§∞‡•ç‡§° ‡§ï‡§ø‡§è ‡§ó‡§è ‡§Æ‡•à‡§∏‡•á‡§ú ‡§ï‡•Ä ID ‡§∏‡•á ‡§≤‡§ø‡§Ç‡§ï ‡§¨‡§®‡§æ‡§ì
        # Pyrogram ‡§´‡§º‡§æ‡§á‡§≤ ‡§ï‡§æ ‡§®‡§æ‡§Æ ‡§∏‡§π‡•Ä ‡§∏‡•á ‡§¶‡•á‡§§‡§æ ‡§π‡•à‡•§
        file_name = getattr(media, "file_name", "telegram_file.dat")
        message_id = forwarded_msg.id
        
        direct_link = generate_direct_link(message_id, file_name)
        
        # 4. ‡§Ø‡•Ç‡§ú‡§∞ ‡§ï‡•ã ‡§≤‡§ø‡§Ç‡§ï ‡§≠‡•á‡§ú‡•ã
        response_text = (
            f"üì• **‡§´‡§º‡§æ‡§á‡§≤ ‡§ï‡§æ ‡§®‡§æ‡§Æ:** `{file_name}`\n"
            f"üîó **‡§°‡§æ‡§Ø‡§∞‡•á‡§ï‡•ç‡§ü ‡§≤‡§ø‡§Ç‡§ï:** [‡§Ø‡§π‡§æ‡§Ç ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡•á‡§Ç]({direct_link})\n\n"
            f"`{direct_link}`" # ‡§Ø‡•Ç‡§ú‡§∞ ‡§ï‡•ã ‡§ï‡•â‡§™‡•Ä ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Ü‡§∏‡§æ‡§®‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è
        )
        
        await status_msg.edit_text(response_text, parse_mode=ParseMode.MARKDOWN, disable_web_page_preview=True)

    except Exception as e:
        print(f"Error during link generation: {e}")
        await status_msg.edit_text(f"‚ùå ‡§≤‡§ø‡§Ç‡§ï ‡§ú‡•á‡§®‡§∞‡•á‡§ü ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§ï‡•ã‡§à ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§Ü‡§à:\n`{e}`")


# ---------------------------------------------
# FastAPI (Web Server) Setup for Render
# ---------------------------------------------

fastapi_app = FastAPI()

# 1. Start-up: Pyrogram Client ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•ã ‡§î‡§∞ Webhook ‡§∏‡•á‡§ü ‡§ï‡§∞‡•ã
@fastapi_app.on_event("startup")
async def startup_event():
    print("Starting Pyrogram client and setting webhook...")
    try:
        await app.start()
        
        if WEBHOOK_URL:
            # Webhook set ‡§ï‡§∞‡•á‡§Ç
            await app.set_webhook(url=f"{WEBHOOK_URL}/{BOT_TOKEN}")
            print(f"Webhook set to: {WEBHOOK_URL}/{BOT_TOKEN}")
        else:
            print("ERROR: WEBHOOK_URL not set. Bot will not work correctly on Render!")
            
    except Exception as e:
        print(f"Startup failed: {e}")

# 2. Webhook Route: Telegram ‡§∏‡•á ‡§Ü‡§®‡•á ‡§µ‡§æ‡§≤‡•á ‡§∏‡§≠‡•Ä ‡§Ö‡§™‡§°‡•á‡§ü ‡§Ø‡§π‡§æ‡§Å ‡§π‡•à‡§Ç‡§°‡§≤ ‡§π‡•ã‡§Ç‡§ó‡•á
@fastapi_app.post(f"/{BOT_TOKEN}")
async def bot_webhook(request: Request):
    """Telegram Webhook updates ‡§ï‡•ã ‡§π‡•à‡§Ç‡§°‡§≤ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à"""
    # Note: Telegram Bot API Secret Token ‡§ï‡•ã ‡§≠‡•Ä ‡§ö‡•á‡§ï ‡§ï‡§∞‡§®‡§æ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§π‡•à‡•§
    
    data = await request.json()
    
    # Pyrogram ‡§ï‡•ã ‡§Ö‡§™‡§°‡•á‡§ü ‡§≠‡•á‡§ú‡•á‡§Ç
    await app.process_update(data)
    
    return {"ok": True}

# 3. Direct Link Route: ‡§Ø‡§π ‡§µ‡§π ‡§Ö‡§∏‡§≤‡•Ä ‡§≤‡§ø‡§Ç‡§ï ‡§π‡•à ‡§ú‡•ã ‡§´‡§º‡§æ‡§á‡§≤ ‡§ï‡•ã ‡§∏‡•ç‡§ü‡•ç‡§∞‡•Ä‡§Æ ‡§ï‡§∞‡•á‡§ó‡§æ
@fastapi_app.get("/dl/{message_id}/{file_name}")
async def direct_link_handler(message_id: int, file_name: str):
    """‡§°‡§æ‡§Ø‡§∞‡•á‡§ï‡•ç‡§ü ‡§≤‡§ø‡§Ç‡§ï ‡§∏‡•á ‡§´‡§º‡§æ‡§á‡§≤ ‡§ï‡•ã ‡§∏‡•ç‡§ü‡•ç‡§∞‡•Ä‡§Æ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à"""
    
    # ‡§Ø‡§π ‡§´‡§º‡§Ç‡§ï‡•ç‡§∂‡§® Pyrogram client ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§ï‡•á ‡§´‡§º‡§æ‡§á‡§≤ ‡§ï‡•ã ‡§∏‡•ç‡§ü‡•ç‡§∞‡•Ä‡§Æ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à
    try:
        # get_messages ‡§∏‡•á ‡§Æ‡•à‡§∏‡•á‡§ú ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§Æ‡§ø‡§≤‡§§‡•Ä ‡§π‡•à
        forwarded_msg = await app.get_messages(chat_id=BIN_CHANNEL, message_ids=message_id)
        
        # ‡§´‡§º‡§æ‡§á‡§≤ ‡§ï‡•ã ‡§∏‡•ç‡§ü‡•ç‡§∞‡•Ä‡§Æ ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ logic
        # Pyrogram ‡§ï‡§æ get_file ‡§î‡§∞ FileStreamer ‡§ï‡•ç‡§≤‡§æ‡§∏ ‡§ï‡§æ ‡§á‡§∏‡•ç‡§§‡•á‡§Æ‡§æ‡§≤ ‡§ï‡§∞‡§®‡§æ ‡§π‡•ã‡§ó‡§æ‡•§
        
        # **‡§®‡•ã‡§ü:** ‡§∏‡•Ä‡§ß‡•á FastAPI ‡§∏‡•á Pyrogram Streaming ‡§ï‡•ã ‡§á‡§Ç‡§ü‡•Ä‡§ó‡•ç‡§∞‡•á‡§ü ‡§ï‡§∞‡§®‡§æ ‡§•‡•ã‡§°‡§º‡§æ ‡§Æ‡•Å‡§∂‡•ç‡§ï‡§ø‡§≤ ‡§π‡•à‡•§
        # ‡§á‡§∏ ‡§∂‡•â‡§∞‡•ç‡§ü‡§ï‡§ü ‡§Æ‡•á‡§Ç, ‡§π‡§Æ ‡§´‡§º‡§ø‡§≤‡§π‡§æ‡§≤ ‡§á‡§∏‡•á ‡§è‡§ï placeholder ‡§∞‡§ñ‡§§‡•á ‡§π‡•à‡§Ç, 
        # ‡§î‡§∞ ‡§Ø‡•Ç‡§ú‡§∞ ‡§ï‡•ã ‡§è‡§ï 'Download' ‡§Æ‡•à‡§∏‡•á‡§ú ‡§¶‡•á ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç ‡§ú‡§¨ ‡§§‡§ï ‡§Ü‡§™ Streaming Logic ‡§®‡§π‡•Ä‡§Ç ‡§ú‡•ã‡§°‡§º‡§§‡•á‡•§
        
        # ***TEMP Placeholder***
        return {"error": "Streaming logic not fully implemented yet.", 
                "message": f"File ID {message_id} in BIN_CHANNEL is ready to stream/download."}
        
    except Exception as e:
        return {"error": "File not found or access denied.", "details": str(e)}

# 4. Health Check (Render ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ú‡§º‡§∞‡•Ç‡§∞‡•Ä)
@fastapi_app.get("/")
async def health_check():
    """Render ‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡•á‡§≤‡•ç‡§• ‡§ö‡•á‡§ï‡•§"""
    return {"status": "ok", "service": "TG Direct Link Generator Bot is running"}


# 5. Shut-down: Client ‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡•ã ‡§î‡§∞ Webhook ‡§π‡§ü‡§æ‡§ì
@fastapi_app.on_event("shutdown")
async def shutdown_event():
    print("Stopping Pyrogram client and deleting webhook...")
    try:
        await app.stop()
        if WEBHOOK_URL:
            await app.delete_webhook()
    except Exception as e:
        print(f"Shutdown failed: {e}")

# Uvicorn entry point
app = fastapi_app
  
